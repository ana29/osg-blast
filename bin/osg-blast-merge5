#!/usr/bin/python

import libxml2
import sys
import os
import glob
import resource
import subprocess

#run qb merge
block=0
while True:
    if not os.path.exists("output.qb_"+str(block)+".db_0"):
        break

    #need to call this as separate process - so that libxml2 will let go of the virtual memory
    try:
        ret = subprocess.call(["osg-blast-merge5.block.py", str(block)])
        if ret < 0:
            print "osg-blast-merge5.block.py killed by signal", -retcode
        elif ret > 0:
            print "osg-blast-merge5.block.py returned ", retcode
            sys.exit(1)
    except OSError, e:
        print "osg-blast-merge5.block.py execution failed:", e

    block+=1

#merge(26)

#then merge all qbs
output_path = "merged"
output = open(output_path, "w")
print "final output:",output_path

count = 0 #start with block 0
while True:
        path = "merged.qb_"+str(count)
        if os.path.exists(path):
                handle = open(path, "r")
        else:
            break #failed to find - stop

        print "processing",path

        header = handle.readline()
        if not header:
            raise Exception("BLAST XML file '%s' was empty" % path)
        if header.strip() != '<?xml version="1.0"?>':
            raise Exception("BLAST file '%s' is not an XML file" % path)
        line = handle.readline()
        header += line
        if line.strip()[0:59] != '<!DOCTYPE BlastOutput PUBLIC "-//NCBI//NCBI BlastOutput/EN"':
            raise Exception("BLAST file '%s' is not a valid XML file" % path)
        while True:
            line = handle.readline()
            if not line:
                raise Exception("BLAST XML file '%s' ended prematurely" % path)
            header += line
            if "<Iteration>" in line: break
            if len(header) > 10000:
                raise Exception("BLAST file '%s' has a too long a header" % path)
        if "<BlastOutput>" not in header:
            raise Exception("BLAST XML file '%s' header's seems bad" % path)
        if count == 0:
            output.write(header)
            old_header = header
        elif old_header[:300] != header[:300]:
            raise Exception("BLAST XML headers don't match" % path)
        else: output.write("    <Iteration>\n")
        #print "loading iterations"
        for line in handle:
            #if "</BlastOutput_iterations>" in line: break
            if line.find("</BlastOutput_iterations>") != -1: 
                break
            output.write(line)
        #print "done loading iterations"

        handle.close()

        #print "removing",path
        #os.remove(path)

        count+=1

if count > 0:
        #output the tail
        output.write("</BlastOutput_iterations>\n")
        output.write("</BlastOutput>\n\n")
else:
        print "Couldn't find any blast results to merge.."
        sys.exit(1)

output.flush()
output.close()


